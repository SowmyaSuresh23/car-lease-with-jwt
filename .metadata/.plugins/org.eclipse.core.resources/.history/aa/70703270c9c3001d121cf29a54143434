package com.sowmya.carleaseplatform.service;

import java.sql.Timestamp;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.sowmya.carleaseplatform.constants.CarLeaseServiceConstants;
import com.sowmya.carleaseplatform.dto.CarLeaseRequest;
import com.sowmya.carleaseplatform.entity.CarDetailsEntity;
import com.sowmya.carleaseplatform.entity.CarLeaseDetailsEntity;
import com.sowmya.carleaseplatform.exception.CarLeaseException;
import com.sowmya.carleaseplatform.exception.DetailsNotFoundException;
import com.sowmya.carleaseplatform.repository.CarDetailsRepository;
import com.sowmya.carleaseplatform.repository.CarLeaseRepository;
import jakarta.transaction.Transactional;

@Service
public class CarLeaseDetailsService {

  @Autowired
  CarLeaseRepository carLeaseRepository;

  @Autowired
  CarDetailsRepository carDetailsRepository;

  @Transactional
  public void createNewLease(CarLeaseRequest request) {

    CarDetailsEntity carDetails =
        carDetailsRepository.findByCarNumberIgnoreCase(request.getCarNumber()).orElseThrow(
            () -> new DetailsNotFoundException(CarLeaseServiceConstants.CAR_NOT_FOUND));
    if (carLeaseRepository.countByCarNumberIgnoreCaseAndDeleteFlag(request.getCarNumber(),
        "N") == 0) {

      CarLeaseDetailsEntity newLease = CarLeaseDetailsEntity.builder()
          .duration(request.getDuration()).interestRate(request.getInterestRate())
          .leaseRate(request.getLeaseRate()).customerId(request.getCustomerId())
          .carDetails(carDetails).createdUser(request.getUserId()).delete_flag("N")
          .createdTimestamp(new Timestamp(System.currentTimeMillis())).build();

      carLeaseRepository.save(newLease);
    } else {
      throw new CarLeaseException(CarLeaseServiceConstants.CAR_UNAVAILABLE_FOR_LEASE);
    }
  }

  @Transactional
  public void findLeaseDetails(Long leaseId) {
    CarLeaseDetailsEntity carLeaseDetails = carLeaseRepository.findById(leaseId)
        .orElseThrow(() -> new DetailsNotFoundException(CarLeaseServiceConstants.LEASE_NOT_FOUND));
    CarDetailsEntity carDetails =
        carDetailsRepository.findByCarNumberIgnoreCase(carLeaseDetails.getCarNumber()).orElseThrow(
            () -> new DetailsNotFoundException(CarLeaseServiceConstants.CAR_NOT_FOUND));

  }

  @Transactional
  public void deleteLeaseDetails(Long leaseId) {
    CarLeaseDetailsEntity existingLeaseDetails = carLeaseRepository.findById(leaseId)
        .orElseThrow(() -> new DetailsNotFoundException(CarLeaseServiceConstants.LEASE_NOT_FOUND));
    existingLeaseDetails.setDelete_flag("Y");
    carLeaseRepository.save(existingLeaseDetails);
  }


}
