package com.sowmya.carleaseplatform;

import static org.hamcrest.CoreMatchers.is;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.patch;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import java.util.ArrayList;
import java.util.Map;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import com.google.gson.Gson;
import com.sowmya.carleaseplatform.constants.CarLeaseServiceConstants;
import com.sowmya.carleaseplatform.controller.CarDetailsController;
import com.sowmya.carleaseplatform.dto.CarDetailsRequest;
import com.sowmya.carleaseplatform.dto.ResponseDto;
import com.sowmya.carleaseplatform.service.CarDetailsService;
import antlr.collections.List;
import jakarta.persistence.PersistenceException;

@ExtendWith(MockitoExtension.class)
@WebMvcTest(CarDetailsController.class)
public class CarDetailsControllerUnitTest {
  @Autowired
  private MockMvc mvc;

  @MockBean
  private CarDetailsService carDetailsService;


  private Gson gson = new Gson();


  @Test
  public void saveCarDetailsSuccessUnitTest() throws Exception {

    ResponseDto response = new ResponseDto();
    response = ResponseDto.builder().responseCode(CarLeaseServiceConstants.SUCCESS_CODE)
        .responseMessage(CarLeaseServiceConstants.NEW_CAR_SAVE_SUCCESS).build();
    when(carDetailsService.saveCarDetails(Mockito.any(CarDetailsRequest.class)))
        .thenReturn(response);

    CarDetailsRequest newCar = CarDetailsRequest.builder().carNumber("2-XXX-90").make("Toyota")
        .model("Camry").version("2").noOfDoors(4).co2Emission(125D).grossPrice(40000D)
        .netPrice(38000D).mileage(19F).userName("Sowmya").build();

    mvc.perform(post("/recipes/saveCarDetails").contentType(MediaType.APPLICATION_JSON)
        .content(gson.toJson(newCar))).andExpect(status().isOk())
        .andExpect(jsonPath("responseCode", is(CarLeaseServiceConstants.SUCCESS_CODE)))
        .andExpect(jsonPath("responseMessage", is(CarLeaseServiceConstants.NEW_CAR_SAVE_SUCCESS)));
  }

  @Test
  public void addDuplicateCarUnitTest() throws Exception {

    ResponseDto response = new ResponseDto();
    response = ResponseDto.builder().responseCode(CarLeaseServiceConstants.CONFLICT)
        .responseMessage(CarLeaseServiceConstants.DUPLICATE_CAR_NAME).build();
    when(carDetailsService.saveCarDetails(Mockito.any(CarDetailsRequest.class)))
        .thenReturn(response);

    CarDetailsRequest newCar = CarDetailsRequest.builder().carNumber("2-XXX-90").make("Toyota")
        .model("Camry").version("2").noOfDoors(4).co2Emission(125D).grossPrice(40000D)
        .netPrice(38000D).mileage(19F).userName("Sowmya").build();

    mvc.perform(post("/recipes/saveCarDetails").contentType(MediaType.APPLICATION_JSON)
        .content(gson.toJson(newCar))).andExpect(status().isOk())
        .andExpect(jsonPath("responseCode", is(CarLeaseServiceConstants.CONFLICT)))
        .andExpect(jsonPath("responseMessage", is(CarLeaseServiceConstants.DUPLICATE_CAR_NAME)));
  }

  @Test
  public void saveCarWithInvalidRequestUnitTest() throws Exception {

    ResponseDto response = new ResponseDto();
    response = ResponseDto.builder().responseCode(CarLeaseServiceConstants.SUCCESS_CODE)
        .responseMessage(CarLeaseServiceConstants.SAVE_RECIPE_SUCCESSFUL).build();
    when(carDetailsService.saveCarDetails(Mockito.any(CarDetailsRequest.class)))
        .thenReturn(response);

    CarDetailsRequest newCar = CarDetailsRequest.builder().carNumber("2-XXX-900").model("Camry")
        .version("2").noOfDoors(4).co2Emission(125D).grossPrice(40000D).netPrice(38000D)
        .mileage(19F).userName("Sowmya").build();

    mvc.perform(post("/recipes/saveCarDetails").contentType(MediaType.APPLICATION_JSON)
        .content(gson.toJson(newCar))).andExpect(status().isBadRequest())
        .andExpect(jsonPath("responseCode", is(CarLeaseServiceConstants.BAD_REQUEST)));
  }

  @Test
  public void addRecipeWithMultipleErrorsInRequestUnitTest() throws Exception {

    ResponseDto response = new ResponseDto();
    response = ResponseDto.builder().responseCode(CarLeaseServiceConstants.SUCCESS_CODE)
        .responseMessage(CarLeaseServiceConstants.SAVE_RECIPE_SUCCESSFUL).build();
    when(carDetailsService.addRecipe(Mockito.any(CarDetailsRequest.class))).thenReturn(response);

    CarDetailsRequest recipe = new CarDetailsRequest();
    recipe = CarDetailsRequest.builder().noOfServings(1).ingredients("Eggs,butter")
        .isVegetarian("No").userName("Sowmya").build();

    mvc.perform(post("/recipes/addRecipe").contentType(MediaType.APPLICATION_JSON)
        .content(gson.toJson(recipe))).andExpect(status().isBadRequest())
        .andExpect(jsonPath("responseCode", is(CarLeaseServiceConstants.BAD_REQUEST)));
  }

  @Test
  public void addRecipeCustomExceptionUnitTest() throws Exception {
      
      when(carDetailsService.addRecipe(Mockito.any(CarDetailsRequest.class))).thenThrow(new CustomException(CarLeaseServiceConstants.ERROR_SAVING_RECIPE));

      CarDetailsRequest recipe = new CarDetailsRequest();
      recipe = CarDetailsRequest.builder().recipeName("Omelette").noOfServings(1).ingredients("Eggs,butter")
              .instruction("1. Beat the eggs.\n"
                      + "2. Pour the eggs in a pan.\n"
                      + "3. Cover the lid and cook for a minute.")
              .isVegetarian("N")
              .userName("Sowmya").build();
      
      mvc.perform(post("/recipes/addRecipe")
        .contentType(MediaType.APPLICATION_JSON)
        .content(gson.toJson(recipe)))
        .andExpect(status().isInternalServerError())
        .andExpect(jsonPath("responseCode", is(CarLeaseServiceConstants.INTERNAL_SERVER_ERROR)))
        .andExpect(jsonPath("responseMessage", is(CarLeaseServiceConstants.ERROR_SAVING_RECIPE)));
  }

  @Test
  public void addRecipeExceptionUnitTest() throws Exception {
      
      when(carDetailsService.addRecipe(Mockito.any(CarDetailsRequest.class))).thenThrow(new NullPointerException());

      CarDetailsRequest recipe = new CarDetailsRequest();
      recipe = CarDetailsRequest.builder().recipeName("Omelette").noOfServings(1).ingredients("Eggs,butter")
              .instruction("1. Beat the eggs.\n"
                      + "2. Pour the eggs in a pan.\n"
                      + "3. Cover the lid and cook for a minute.")
              .isVegetarian("N")
              .userName("Sowmya").build();
      
      mvc.perform(post("/recipes/addRecipe")
        .contentType(MediaType.APPLICATION_JSON)
        .content(gson.toJson(recipe)))
        .andExpect(status().isInternalServerError())
        .andExpect(jsonPath("responseCode", is(CarLeaseServiceConstants.INTERNAL_SERVER_ERROR)))
        .andExpect(jsonPath("responseMessage", is(CarLeaseServiceConstants.SYSTEM_ERROR)));
  }

  @Test
  public void deleteRecipeUnitTest() throws Exception {

    ResponseDto response = new ResponseDto();
    response = ResponseDto.builder().responseCode(CarLeaseServiceConstants.SUCCESS_CODE)
        .responseMessage(CarLeaseServiceConstants.DELETE_RECIPE_SUCCESSFUL).build();
    when(carDetailsService.deleteRecipe(Mockito.any(String.class))).thenReturn(response);


    mvc.perform(delete("/recipes/deleteRecipe").contentType(MediaType.APPLICATION_JSON)
        .param("recipeName", "Rice")).andExpect(status().isOk())
        .andExpect(jsonPath("responseCode", is(CarLeaseServiceConstants.SUCCESS_CODE))).andExpect(
            jsonPath("responseMessage", is(CarLeaseServiceConstants.DELETE_RECIPE_SUCCESSFUL)));
  }

  @Test
  public void deleteUnavailableRecipeUnitTest() throws Exception {

    ResponseDto response = new ResponseDto();
    response = ResponseDto.builder().responseCode(CarLeaseServiceConstants.NOT_FOUND)
        .responseMessage(CarLeaseServiceConstants.RECIPE_NOT_FOUND).build();
    when(carDetailsService.deleteRecipe(Mockito.any(String.class))).thenReturn(response);


    mvc.perform(delete("/recipes/deleteRecipe").contentType(MediaType.APPLICATION_JSON)
        .param("recipeName", "Rice")).andExpect(status().isOk())
        .andExpect(jsonPath("responseCode", is(CarLeaseServiceConstants.NOT_FOUND)))
        .andExpect(jsonPath("responseMessage", is(CarLeaseServiceConstants.RECIPE_NOT_FOUND)));
  }

  @Test
  public void deleteInvalidRequestUnitTest() throws Exception {

    ResponseDto response = new ResponseDto();
    response = ResponseDto.builder().responseCode(CarLeaseServiceConstants.SUCCESS_CODE)
        .responseMessage(CarLeaseServiceConstants.DELETE_RECIPE_SUCCESSFUL).build();
    when(carDetailsService.deleteRecipe(Mockito.any(String.class))).thenReturn(response);


    mvc.perform(delete("/recipes/deleteRecipe").contentType(MediaType.APPLICATION_JSON)
        .param("recipeName", "")).andExpect(status().isBadRequest())
        .andExpect(jsonPath("responseCode", is(CarLeaseServiceConstants.BAD_REQUEST)));
  }

  @Test
  public void deleteExceptionUnitTest() throws Exception {
      
      when(carDetailsService.deleteRecipe(Mockito.any(String.class))).thenThrow(new PersistenceException());

      
      mvc.perform(delete("/recipes/deleteRecipe")
        .contentType(MediaType.APPLICATION_JSON)
        .param("recipeName", "Omelette"))
        .andExpect(status().isInternalServerError())
        .andExpect(jsonPath("responseCode", is(CarLeaseServiceConstants.INTERNAL_SERVER_ERROR)));
  }

  @Test
  public void updateRecipeUnitTest() throws Exception {

    ResponseDto response = new ResponseDto();
    response = ResponseDto.builder().responseCode(CarLeaseServiceConstants.SUCCESS_CODE)
        .responseMessage(CarLeaseServiceConstants.UPDATE_RECIPE_SUCCESSFUL).build();
    when(carDetailsService.updateRecipe(Mockito.any(UpdateRecipeRequest.class)))
        .thenReturn(response);

    UpdateRecipeRequest updateRecipe = new UpdateRecipeRequest();
    updateRecipe =
        UpdateRecipeRequest.builder().recipeName("Omelette").noOfServings(3).ingredients("Eggs,oil")
            .instruction("1. Beat the eggs.\n" + "2. Pour the eggs in a pan.\n" + "3. Add oil.\n"
                + "3. Cover the lid and cook for a minute.")
            .isVegetarian("Y").userName("Sowmya").build();

    mvc.perform(patch("/recipes/updateRecipe").contentType(MediaType.APPLICATION_JSON)
        .content(gson.toJson(updateRecipe))).andExpect(status().isOk())
        .andExpect(jsonPath("responseCode", is(CarLeaseServiceConstants.SUCCESS_CODE))).andExpect(
            jsonPath("responseMessage", is(CarLeaseServiceConstants.UPDATE_RECIPE_SUCCESSFUL)));
  }

  @Test
  public void updateRecipeWithInvalidRequestUnitTest() throws Exception {

    ResponseDto response = new ResponseDto();
    response = ResponseDto.builder().responseCode(CarLeaseServiceConstants.SUCCESS_CODE)
        .responseMessage(CarLeaseServiceConstants.UPDATE_RECIPE_SUCCESSFUL).build();
    when(carDetailsService.updateRecipe(Mockito.any(UpdateRecipeRequest.class)))
        .thenReturn(response);

    UpdateRecipeRequest updateRecipe = new UpdateRecipeRequest();
    updateRecipe = UpdateRecipeRequest.builder().noOfServings(3).ingredients("Eggs,oil")
        .instruction("1. Beat the eggs.\n" + "2. Pour the eggs in a pan.\n" + "3. Add oil.\n"
            + "3. Cover the lid and cook for a minute.")
        .isVegetarian("YES").userName("Sowmya").build();

    mvc.perform(patch("/recipes/updateRecipe").contentType(MediaType.APPLICATION_JSON)
        .content(gson.toJson(updateRecipe))).andExpect(status().isBadRequest())
        .andExpect(jsonPath("responseCode", is(CarLeaseServiceConstants.BAD_REQUEST)));
  }


  @Test
  public void updateUnavailableRecipeUnitTest() throws Exception {

    ResponseDto response = new ResponseDto();
    response = ResponseDto.builder().responseCode(CarLeaseServiceConstants.NOT_FOUND)
        .responseMessage(CarLeaseServiceConstants.RECIPE_NOT_FOUND).build();
    when(carDetailsService.updateRecipe(Mockito.any(UpdateRecipeRequest.class)))
        .thenReturn(response);

    UpdateRecipeRequest updateRecipe = new UpdateRecipeRequest();
    updateRecipe =
        UpdateRecipeRequest.builder().recipeName("Rice").noOfServings(3).ingredients("Eggs,oil")
            .instruction("1. Beat the eggs.\n" + "2. Pour the eggs in a pan.\n" + "3. Add oil.\n"
                + "3. Cover the lid and cook for a minute.")
            .isVegetarian("Y").userName("Sowmya").build();

    mvc.perform(patch("/recipes/updateRecipe").contentType(MediaType.APPLICATION_JSON)
        .content(gson.toJson(updateRecipe))).andExpect(status().isOk())
        .andExpect(jsonPath("responseCode", is(CarLeaseServiceConstants.NOT_FOUND)))
        .andExpect(jsonPath("responseMessage", is(CarLeaseServiceConstants.RECIPE_NOT_FOUND)));
  }

  @Test
  public void updateRecipeExceptionUnitTest() throws Exception {
      
      when(carDetailsService.updateRecipe(Mockito.any(UpdateRecipeRequest.class))).thenThrow(new CustomException(CarLeaseServiceConstants.ERROR_UPDATING_RECIPE));

      UpdateRecipeRequest updateRecipe = new UpdateRecipeRequest();
      updateRecipe = UpdateRecipeRequest.builder().recipeName("Omelette").noOfServings(3).ingredients("Eggs,oil").instruction("1. Beat the eggs.\n"
              + "2. Pour the eggs in a pan.\n"
              + "3. Add oil.\n"
              + "3. Cover the lid and cook for a minute.").isVegetarian("Y").userName("Sowmya").build();
      
      mvc.perform(patch("/recipes/updateRecipe")
        .contentType(MediaType.APPLICATION_JSON)
        .content(gson.toJson(updateRecipe)))
        .andExpect(status().isInternalServerError())
        .andExpect(jsonPath("responseCode", is(CarLeaseServiceConstants.INTERNAL_SERVER_ERROR)));
  }

  @Test
  public void findRecipeByNameUnitTest() throws Exception {

    RecipeDetailsDto recipe = new CarDetailsEntityDetailsDto();
    recipe = RecipeDetailsDto.builder().recipeName("Omelette").noOfServings(1)
        .instruction("1. Beat the eggs.\n" + "2. Pour the eggs in a pan.\n" + "3. Add oil.\n"
            + "3. Cover the lid and cook for a minute.")
        .ingredients("Eggs,oil").isVegetarian("N").build();
    ResponseDto response = new ResponseDto();
    response.setRecipeList(List.of(recipe));
    response.setResponseCode(CarLeaseServiceConstants.SUCCESS_CODE);
    response.setResponseMessage(CarLeaseServiceConstants.FECTH_RECIPE_SUCCESSFUL);
    when(carDetailsService.findRecipeByName(Mockito.any(String.class))).thenReturn(response);


    mvc.perform(get("/recipes/getRecipe").contentType(MediaType.APPLICATION_JSON)
        .param("recipeName", "Omelette")).andExpect(status().isOk())
        .andExpect(jsonPath("responseCode", is(CarLeaseServiceConstants.SUCCESS_CODE))).andExpect(
            jsonPath("responseMessage", is(CarLeaseServiceConstants.FECTH_RECIPE_SUCCESSFUL)));
  }

  @Test
  public void findRecipeByNameWithNoRequestUnitTest() throws Exception {

    RecipeDetailsDto recipe = new CarDetailsEntityDetailsDto();
    recipe = RecipeDetailsDto.builder().recipeName("Omelette").noOfServings(1)
        .instruction("1. Beat the eggs.\n" + "2. Pour the eggs in a pan.\n" + "3. Add oil.\n"
            + "3. Cover the lid and cook for a minute.")
        .ingredients("Eggs,oil").isVegetarian("N").build();
    ResponseDto response = new ResponseDto();
    response.setRecipeList(List.of(recipe));
    response.setResponseCode(CarLeaseServiceConstants.SUCCESS_CODE);
    response.setResponseMessage(CarLeaseServiceConstants.FECTH_RECIPE_SUCCESSFUL);
    when(carDetailsService.findRecipeByName(Mockito.any(String.class))).thenReturn(response);


    mvc.perform(get("/recipes/getRecipe").contentType(MediaType.APPLICATION_JSON))
        .andExpect(status().isBadRequest())
        .andExpect(jsonPath("responseCode", is(CarLeaseServiceConstants.BAD_REQUEST)));
  }

  @Test
  public void findUnavailableRecipeUnitTest() throws Exception {

    ResponseDto response = new ResponseDto();
    response.setResponseCode(CarLeaseServiceConstants.NOT_FOUND);
    response.setResponseMessage(CarLeaseServiceConstants.RECIPE_NOT_FOUND);
    response.setRecipeList(new ArrayList<>());
    when(carDetailsService.findRecipeByName(Mockito.any(String.class))).thenReturn(response);


    mvc.perform(get("/recipes/getRecipe").contentType(MediaType.APPLICATION_JSON)
        .param("recipeName", "Omelette")).andExpect(status().isOk())
        .andExpect(jsonPath("responseCode", is(CarLeaseServiceConstants.NOT_FOUND)));
  }

  @Test
  public void findRecipeByNameExceptionUnitTest() throws Exception {
      
      when(carDetailsService.findRecipeByName(Mockito.any(String.class))).thenThrow(new CustomException(CarLeaseServiceConstants.ERROR_FETCHING_RECIPE));
     
      mvc.perform(get("/recipes/getRecipe")
        .contentType(MediaType.APPLICATION_JSON)
        .param("recipeName", "Omelette"))
        .andExpect(status().isInternalServerError())
        .andExpect(jsonPath("responseCode", is(CarLeaseServiceConstants.INTERNAL_SERVER_ERROR)))
        .andExpect(jsonPath("responseMessage", is(CarLeaseServiceConstants.ERROR_FETCHING_RECIPE)));
  }

  @Test
  public void filterRecipesUnitTest() throws Exception {

    ResponseDto response = new ResponseDto();
    RecipeDetailsDto recipe = new CarDetailsEntityDetailsDto();
    recipe = RecipeDetailsDto.builder().recipeName("Omelette").noOfServings(1)
        .instruction("1. Beat the eggs.\n" + "2. Pour the eggs in a pan.\n" + "3. Add oil.\n"
            + "3. Cover the lid and cook for a minute.")
        .ingredients("Eggs,oil").isVegetarian("N").build();
    List<RecipeDetailsDto> recipeList = new ArrayList<>();
    recipeList.add(recipe);
    response.setRecipeList(recipeList);
    response.setResponseCode(CarLeaseServiceConstants.SUCCESS_CODE);
    response.setResponseMessage(CarLeaseServiceConstants.FILTER_RECIPE_SUCCESSFUL);

    when(carDetailsService.filterRecipes(Mockito.any(FilterRecipiesRequest.class)))
        .thenReturn(response);

    FilterRecipiesRequest filterConditions = new FilterRecipiesRequest();
    filterConditions = FilterRecipiesRequest.builder().noOfServingsCond(Map.of(1, "="))
        .includeIngredients("egg,oil").excludeIngredients("garlic").instruction("pan")
        .isVegetarian("Y").build();

    mvc.perform(get("/recipes/filterRecipes").contentType(MediaType.APPLICATION_JSON)
        .content(gson.toJson(filterConditions))).andExpect(status().isOk())
        .andExpect(jsonPath("responseCode", is(CarLeaseServiceConstants.SUCCESS_CODE))).andExpect(
            jsonPath("responseMessage", is(CarLeaseServiceConstants.FILTER_RECIPE_SUCCESSFUL)));
  }

  @Test
  public void filterRecipesWithInvalidRequestUnitTest() throws Exception {

    ResponseDto response = new ResponseDto();
    RecipeDetailsDto recipe = new CarDetailsEntityDetailsDto();
    recipe = RecipeDetailsDto.builder().recipeName("Omelette").noOfServings(1)
        .instruction("1. Beat the eggs.\n" + "2. Pour the eggs in a pan.\n" + "3. Add oil.\n"
            + "3. Cover the lid and cook for a minute.")
        .ingredients("Eggs,oil").isVegetarian("N").build();
    List<RecipeDetailsDto> recipeList = new ArrayList<>();
    recipeList.add(recipe);
    response.setRecipeList(recipeList);
    response.setResponseCode(CarLeaseServiceConstants.SUCCESS_CODE);
    response.setResponseMessage(CarLeaseServiceConstants.FILTER_RECIPE_SUCCESSFUL);

    when(carDetailsService.filterRecipes(Mockito.any(FilterRecipiesRequest.class)))
        .thenReturn(response);

    FilterRecipiesRequest filterConditions = new FilterRecipiesRequest();
    filterConditions = FilterRecipiesRequest.builder().noOfServingsCond(Map.of(1, ">"))
        .includeIngredients("egg,oil").excludeIngredients("garlic").instruction("pan")
        .isVegetarian("Yes").build();

    mvc.perform(get("/recipes/filterRecipes").contentType(MediaType.APPLICATION_JSON)
        .content(gson.toJson(filterConditions))).andExpect(status().isBadRequest())
        .andExpect(jsonPath("responseCode", is(CarLeaseServiceConstants.BAD_REQUEST)));
  }

  @Test
  public void filterRecipesWithNoMatchesUnitTest() throws Exception {

    ResponseDto response = new ResponseDto();
    response.setResponseCode(CarLeaseServiceConstants.NOT_FOUND);
    response.setResponseMessage(CarLeaseServiceConstants.NO_MATCHES_FOUND);

    when(carDetailsService.filterRecipes(Mockito.any(FilterRecipiesRequest.class)))
        .thenReturn(response);

    FilterRecipiesRequest filterConditions = new FilterRecipiesRequest();
    filterConditions = FilterRecipiesRequest.builder().noOfServingsCond(Map.of(1, ">"))
        .includeIngredients("egg,oil").excludeIngredients("garlic").instruction("pan")
        .isVegetarian("Y").build();

    mvc.perform(get("/recipes/filterRecipes").contentType(MediaType.APPLICATION_JSON)
        .content(gson.toJson(filterConditions))).andExpect(status().isOk())
        .andExpect(jsonPath("responseCode", is(CarLeaseServiceConstants.NOT_FOUND)));
  }
}


