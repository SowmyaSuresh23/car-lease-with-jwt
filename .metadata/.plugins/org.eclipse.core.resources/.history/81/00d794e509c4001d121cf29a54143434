package com.sowmya.gateway.config;

import static org.springframework.security.config.Customizer.withDefaults;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class SecurityConfig {


  @Bean
  public InMemoryUserDetailsManager user() {
    return new InMemoryUserDetailsManager(
        User.withUsername("user").password("pwd").authorities("read").build());
  }

  @Bean
  public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
    return http.csrf(csrf -> csrf.disable()).httpBasic(withDefaults()).build();
  }


  /*
   * @Bean public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
   * http.cors().and().csrf().disable().exceptionHandling()
   * .authenticationEntryPoint(authEntryPointJwt).and().sessionManagement()
   * .sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests()
   * .antMatchers("/api/auth/**").permitAll().antMatchers("/api/test/**").permitAll()
   * .anyRequest().authenticated();
   * 
   * http.authenticationProvider(authenticationProvider());
   * 
   * http.addFilterBefore(authenticationJwtTokenFilter(),
   * UsernamePasswordAuthenticationFilter.class);
   * 
   * return http.build(); }
   */
}
