package com.sowmya.gateway.config;

import com.nimbusds.jose.JOSEException;
import com.nimbusds.jose.jwk.JWKSet;
import com.nimbusds.jose.jwk.RSAKey;
import com.nimbusds.jose.jwk.source.JWKSource;
import com.nimbusds.jose.proc.SecurityContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.ProviderManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.oauth2.jwt.JwtDecoder;
import org.springframework.security.oauth2.jwt.JwtEncoder;
import org.springframework.security.oauth2.jwt.NimbusJwtDecoder;
import org.springframework.security.oauth2.jwt.NimbusJwtEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

import java.util.List;
@Configuration
@EnableWebSecurity
@EnableMethodSecurity
public class SecurityConfig {


  @Bean
  public InMemoryUserDetailsManager user() {
    return new InMemoryUserDetailsManager(
        User.withUsername("user").password("pwd").authorities("read").build());
  }

  @Bean
  public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
    return http.csrf().disable().httpBasic(withDefaults()).build();
  }


  /*
   * @Bean public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
   * http.cors().and().csrf().disable().exceptionHandling()
   * .authenticationEntryPoint(authEntryPointJwt).and().sessionManagement()
   * .sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests()
   * .antMatchers("/api/auth/**").permitAll().antMatchers("/api/test/**").permitAll()
   * .anyRequest().authenticated();
   * 
   * http.authenticationProvider(authenticationProvider());
   * 
   * http.addFilterBefore(authenticationJwtTokenFilter(),
   * UsernamePasswordAuthenticationFilter.class);
   * 
   * return http.build(); }
   */
}
