package com.sowmya.customerservice.service;

import java.sql.Timestamp;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.sowmya.customerservice.constants.CustomerServiceConstants;
import com.sowmya.customerservice.dto.CustomerDetailsRequest;
import com.sowmya.customerservice.dto.CustomerDetailsResponse;
import com.sowmya.customerservice.dto.ResponseDto;
import com.sowmya.customerservice.entity.CustomerEntity;
import com.sowmya.customerservice.exception.CustomerAlreadyExistsException;
import com.sowmya.customerservice.exception.CustomerNotFoundException;
import com.sowmya.customerservice.repository.CustomerDetailsRepository;
import jakarta.transaction.Transactional;

@Service
public class CustomerDetailsServiceImpl {

  private final Logger logger = LoggerFactory.getLogger(this.getClass());

  @Autowired
  private CustomerDetailsRepository customerDetailsRepository;

  /**
   * This method checks if a customer is unique based on email id and saves the customer details.
   * 
   * @param newCustomer details
   * @return response code and response message
   */
  @Transactional
  public ResponseDto saveNewCustomer(CustomerDetailsRequest newCustomer) {
    ResponseDto response = new ResponseDto();
    logger.info("Entering into CustomerDetailsServiceImpl.saveNewCustomer");

    if (customerDetailsRepository.findByEmail(newCustomer.getEmail()).isEmpty()) {
      CustomerEntity newCustomerEntity = CustomerEntity.builder()
          .customerName(newCustomer.getCustomerName()).street(newCustomer.getStreet())
          .houseNumber(newCustomer.getHouseNumber()).zipCode(newCustomer.getZipCode())
          .place(newCustomer.getPlace()).email(newCustomer.getEmail())
          .phoneNumber(newCustomer.getPhoneNumber()).createdUser(newCustomer.getUserName())
          .createdTimestamp(new Timestamp(System.currentTimeMillis())).build();

      customerDetailsRepository.save(newCustomerEntity);

      logger.debug(CustomerServiceConstants.SAVE_NEW_CUSTOMER_SUCCESS);
      response.setResponseCode(CustomerServiceConstants.SUCCESS_CODE);
      response.setResponseMessage(CustomerServiceConstants.SAVE_NEW_CUSTOMER_SUCCESS);
    } else {

      logger.error(CustomerServiceConstants.DUPLICATE_CUSTOMER_NAME);
      throw new CustomerAlreadyExistsException(CustomerServiceConstants.DUPLICATE_CUSTOMER_NAME);
    }

    logger.info("Exiting CustomerDetailsServiceImpl.saveNewCustomer");
    return response;
  }

  /**
   * Deletes a customer based on email address. It throws an exception if customer is not found
   * 
   * @param emailAddress to be deleted
   * @return response code and response message
   */
  @Transactional
  public ResponseDto deleteCustomer(String emailAddress) {
    logger.info("Entering into CustomerDetailsServiceImpl.deleteCustomer");
    ResponseDto response = new ResponseDto();

    Long deleteCount = customerDetailsRepository.deleteByEmail(emailAddress);

    if (deleteCount > 0) {
      logger.debug(CustomerServiceConstants.DELETE_CUSTOMER_SUCCESS);
      response.setResponseMessage(CustomerServiceConstants.DELETE_CUSTOMER_SUCCESS);
      response.setResponseCode(CustomerServiceConstants.SUCCESS_CODE);
    } else {
      logger.error(CustomerServiceConstants.CUSTOMER_NOT_FOUND);
      throw new CustomerNotFoundException(CustomerServiceConstants.CUSTOMER_NOT_FOUND);
    }

    logger.info("Exiting CustomerDetailsServiceImpl.deleteCustomer");
    return response;
  }

  public CustomerDetailsResponse findCustomerByEmailAddress(String emailAddress) {
    logger.info("Entering into CustomerDetailsServiceImpl.findCustomerByEmailAddress");
    CustomerDetailsResponse response = new CustomerDetailsResponse();
    
    CustomerEntity customerEntity = customerDetailsRepository.findByEmail(emailAddress).orElseThrow(() -> new CustomerNotFoundException(CustomerServiceConstants.CUSTOMER_NOT_FOUND));
    
    CustomerDetailsResponse response = CustomerDetailsResponse.builder().customerName(customerEntity.getCustomerName()).street(customerEntity.getStreet()).houseNumber(customerEntity.getHouseNumber()).zipCode(customerEntity.getZipCode()).place(customerEntity.getPlace()).email(customerEntity.getEmail()).phoneNumber(customerEntity.getPhoneNumber()).build();
    
    logger.info("Exiting CustomerDetailsServiceImpl.findCustomerByEmailAddress");
  }
}
